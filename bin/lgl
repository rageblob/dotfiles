#!/usr/bin/env bash
set -e

# Loops across all subdirectories of its working path,
# checks if they're tracked by git and, if so,
# runs `git pull -- prune` in each one.
#
# You may supply a path as argument. If no args are supplied,
# it first checks for environment variable $WORKSPACE.
# If $WORKSPACE is unset, will default to $pwd.

set_workspace() {
  # no args?
  if [[ -z ${1+x} ]]; then 
    # $WORKSPACE set?
    if [[ -n $WORKSPACE ]]; then
      printf "Environment vairable \$WORKSPACE is set.\n  Will use that as working directory:\n" > `tty`
      printf "\t\$WORKSPACE=$WORKSPACE\n\n" > `tty`
      echo "$(cd $WORKSPACE; pwd; cd - > /dev/null)"
    else
      echo "$(pwd)"
    fi
  # invalid args?
  elif [[ ! -d "$1" ]]; then
    printf "Error! \"$1\" is not a valid directory!" > `tty`; exit 1
  # use valid path
  else
    echo "$(cd $1; pwd; cd - > /dev/null)"
  fi
}

find_default_branch() {
  local DEFAULTBRANCH=$(git branch -r | grep "origin/main") 
  # if this expression is empty, "master" is the default branch
  if [[ -z $DEFAULTBRANCH ]]; then
    DEFAULTBRANCH="master"
  else
    DEFAULTBRANCH="main"
  fi
  echo $DEFAULTBRANCH
}

pull_main() {
  local DEFAULTBRANCH=$(find_default_branch)
  git pull -p origin $DEFAULTBRANCH:$DEFAULTBRANCH --rebase > /dev/null
}

update_repo() {
  local BRANCH=$(git branch --show-current)
  local DIRTY=$(git status -s)
  if [[ -n $DIRTY ]]; then
    echo "ðŸ”¥ Worktree dirty! Stashing progress..."
    git add . && git stash > /dev/null
    pull_main
    if [[ $BRANCH -ne "main" && $BRANCH -ne "master"  ]]; then
      git rebase $(find_default_branch) > /dev/null 
    fi
    echo "âœ… Popping stash..."
    git stash pop > /dev/null
  else
    pull_main
  fi
}

attempt_update() {
  if [[ -d "$1/.git" ]]; then
    echo "Updating default branch in $1"
    cd "$1" && update_repo "$1" && cd - > /dev/null
  else
    echo "Skipping $1 - not a git repository"
  fi
}

update_workspace() {
  attempt_update $1; printf "\n"
  # `git pull origin main:main` in every directory
  for dir in $1/*/; do
    attempt_update "$dir"; printf "\n"
  done
}

WORKSPACE=$(set_workspace "$1")
printf "Working directory: $WORKSPACE\n\n"
update_workspace "$WORKSPACE"
