#!/usr/bin/env bash
set -e

# This script does:
# - check if the current directory or any of its children are tracked by git
# - stash any dirty working trees
# - pull the most recent changes on the default branch of each repo
# - rebase the current feature branch onto the updated default branch
# - where applicable, pop the stashed changes
#
# You may optionally supply a target path as argument.
# If no args are supplied,
# this first checks for environment variable $WORKSPACE.
# If $WORKSPACE is unset, it will default to $pwd.

set_workspace() {
  # empty input?
  if [[ -z $1 ]]; then 
    # environment vairable $WORKSPACE set?
    if [[ -n $WORKSPACE ]]; then
      printf "Environment vairable \$WORKSPACE is set.\n  Using that as working directory:\n" > `tty`
      printf "\t\$WORKSPACE=$WORKSPACE\n\n" > `tty`
      echo "$(cd $WORKSPACE && pwd)"
    else
      echo "$(pwd)"
    fi
  # invalid input?
  elif [[ ! -d "$1" ]]; then
    printf "Error! \"$1\" is not a valid directory!" > `tty`; exit 1
  else
    echo "$(cd $1; pwd; cd - > /dev/null)"
  fi
}

echo_default_branch() {
  local ISMAIN=$(git branch -r | grep "origin/main") 
  # if this expression evaluates empty, the default branch is "master"
  if [[ -n $ISMAIN ]]; then
    local DEFAULTBRANCH="main"
  else
    local DEFAULTBRANCH="master"
  fi
  echo $DEFAULTBRANCH
}

update_default_branch() {
  local DEFAULT=$(echo_default_branch)
  git pull -p origin $DEFAULT:$DEFAULT --rebase > /dev/null
}

update_git() {
  local BRANCH=$(git branch --show-current)
  local DIRTY=$(git status -s)
  if [[ -n $DIRTY ]]; then
    echo "ðŸ”¥ Worktree dirty! Stashing progress..."
    git fetch --prune &> /dev/null
    (git add . && git stash > /dev/null)
    update_default_branch
    if [[ $BRANCH -ne "main" && $BRANCH -ne "master" ]]; then
      local DEFAULTBRANCH=$(echo_default_branch)
      git rebase $DEFAULTBRANCH > /dev/null 
    fi
    echo "âœ… Popping stash..."
    git stash pop &> /dev/null
  else
    update_default_branch > /dev/null
  fi
}

attempt_update() {
  if [[ -d "$1/.git" ]]; then
    echo "Updating default branch in $1"
    (cd "$1" && update_git > /dev/null)
  else
    echo "Skipping $1 - not a git repository"
  fi
}

update_workspace() {
  attempt_update $1; printf "\n"
  # `git pull origin main:main` in every directory
  for dir in $1/*/; do
    attempt_update "$dir"; printf "\n"
  done
}

WORKSPACE=$(set_workspace "$1")
printf "Working directory: $WORKSPACE\n\n"
update_workspace "$WORKSPACE"
