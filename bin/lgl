#!/usr/bin/env bash
set -e

# Loops across all subdirectories of its working path,
# checks if they're tracked by git and, if so,
# runs `git pull -- prune` in each one.
#
# You may supply a path as argument. If no args are supplied,
# it first checks for environment variable $WORKSPACE.
# If $WORKSPACE is unset, will default to $pwd.

set_workspace() {
  # no args?
  if [[ -z ${1+x} ]]; then 
    # $WORKSPACE set?
    if [[ -n $WORKSPACE ]]; then
      printf "Environment vairable \$WORKSPACE is set.\n  Will use that as working directory:\n" > `tty`
      printf "\t\$WORKSPACE=$WORKSPACE\n\n" > `tty`
      echo "$(cd $WORKSPACE; pwd; cd - >/dev/null)"
    else
      echo "$(pwd)"
    fi
  # invalid args?
  elif [[ ! -d "$1" ]]; then
    printf "Error! \"$1\" is not a valid directory!" > `tty`; exit 1
  # use valid path
  else
    echo "$(cd $1; pwd; cd - >/dev/null)"
  fi
}

pull_git() {
  cd "$1" && git pull --prune && (cd - >/dev/null)
}

attempt_update() {
  if [ -d "$1/.git" ]; then
    echo "Updating repository in $1"
    pull_git "$1"
  else
    echo "Skipping $1 - not a git repository"
  fi
}

update_workspace() {
  # git pulls in root dir and all subfolders one level down
  attempt_update $1; printf "\n"
  for dir in $1/*/; do
    attempt_update "$dir"; printf "\n"
  done
}

WORKSPACE=$(set_workspace $1)
printf "Working directory: $WORKSPACE\n\n"
update_workspace $WORKSPACE
